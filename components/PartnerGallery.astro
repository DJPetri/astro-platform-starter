---
---

<div id="gallery">
  <div class="gallery-skeleton">
    <div class="skeleton-card"></div>
    <div class="skeleton-card"></div>
    <div class="skeleton-card"></div>
  </div>
</div>

<style>
  #gallery {
    margin-top: 2rem;
  }

.gallery-skeleton,
.gallery-loaded {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}


.skeleton-card {
  aspect-ratio: 3 / 2;
  border-radius: 1rem;
  background: linear-gradient(90deg, #333 25%, #444 50%, #333 75%);
  background-size: 400% 100%;
  animation: loading 1.2s infinite;
}


  @keyframes loading {
    0% {
      background-position: 100% 0;
    }
    100% {
      background-position: -100% 0;
    }
  }

  .gallery-card {
    display: block;
    text-decoration: none;
    color: inherit;
    background: #1e1e1e;
    border-radius: 1rem;
    padding: 1rem;
    transition: transform 0.2s ease;
  }

  .gallery-card:hover {
    transform: scale(1.02);
  }

  .gallery-card img {
    max-width: 100%;
    border-radius: 0.5rem;
    margin-bottom: 0.5rem;
  }
</style>

<script type="module">
  async function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function fetchPartnerUrls() {
    const res = await fetch('/data/partners.json');
    if (!res.ok) throw new Error('Partner-URLs konnten nicht geladen werden');
    return await res.json();
  }

  async function fetchMetadata(url) {
    try {
      const res = await fetch(`https://api.microlink.io/?url=${encodeURIComponent(url)}`);
      if (!res.ok) throw new Error('Microlink API Fehler');
      const { data } = await res.json();
      return {
        url,
        title: data.title || url,
        description: data.description || '',
        image: data.image?.url || '/fallback.png'
      };
    } catch {
      return {
        url,
        title: url,
        description: 'Keine Vorschau verfügbar.',
        image: '/fallback.png'
      };
    }
  }

  async function loadGallery() {
    const gallery = document.getElementById('gallery');

    // Skeleton bleibt erst mal stehen

    try {
      const urls = await fetchPartnerUrls();

      // Testweise Verzögerung (löschen, wenn nicht mehr nötig)
      await sleep(1200);

      if (!Array.isArray(urls) || urls.length === 0) {
        gallery.innerHTML = '<p>Keine Partner gefunden.</p>';
        return;
      }

      const cardsData = await Promise.all(urls.map(fetchMetadata));

      const wrapper = document.createElement('div');
      wrapper.className = 'gallery-loaded';

      for (const { url, title, description, image } of cardsData) {
        const card = document.createElement('a');
        card.href = url;
        card.target = '_blank';
        card.className = 'gallery-card';
        card.innerHTML = `
          <img src="${image}" alt="${title}" />
          <h3>${title}</h3>
          <p>${description}</p>
        `;
        wrapper.appendChild(card);
      }

      gallery.innerHTML = '';
      gallery.appendChild(wrapper);
    } catch (e) {
      gallery.innerHTML = '<p>Fehler beim Laden der Partnerdaten.</p>';
      console.error(e);
    }
  }

  loadGallery();
</script>
